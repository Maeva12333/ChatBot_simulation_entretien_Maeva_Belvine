import os
import streamlit as st
import PyPDF2
import docx
from langchain.chat_models import init_chat_model
from langchain_core.messages import HumanMessage

# Config Streamlit
st.set_page_config(page_title="Chatbot Entretien RH", layout="wide")
st.title("ü§ñ Chatbot d'entretien RH ")

# Config mod√®le LLM
os.environ["GROQ_API_KEY"] = "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"
llm = init_chat_model("llama3-70b-8192", model_provider="groq", temperature=0.7)


# --- Fonctions Utilitaires ---

def lire_fichier(uploaded_file):
    """
    Extrait le texte d'un fichier t√©l√©charg√©, selon son format.

    Parameters
    ----------
    uploaded_file : UploadedFile
        Le fichier t√©l√©charg√© par l'utilisateur, qui peut √™tre au format PDF, DOCX ou TXT.

    Returns
    -------
    str
        Le contenu extrait du fichier sous forme de cha√Æne de caract√®res.
        Si le format est non support√©, retourne une message indiquant l'erreur.
    """
    if uploaded_file.name.endswith(".pdf"):
        reader = PyPDF2.PdfReader(uploaded_file)
        return "".join([page.extract_text() for page in reader.pages])
    elif uploaded_file.name.endswith(".docx"):
        doc = docx.Document(uploaded_file)
        return "\n".join([p.text for p in doc.paragraphs])
    elif uploaded_file.name.endswith(".txt"):
        return uploaded_file.read().decode("utf-8")
    else:
        return "[Format non support√©]"


def generer_reponse(messages):
    """
    G√©n√®re une r√©ponse du mod√®le de langage en fonction des messages pass√©s.

    Parameters
    ----------
    messages : list of HumanMessage
        Liste des messages √©chang√©s pendant l'entretien, dont la derni√®re entr√©e est la question en cours.

    Returns
    -------
    HumanMessage
        R√©ponse g√©n√©r√©e par le mod√®le de langage.
    """
    return llm.invoke(messages)


def feedback(cv_content, fiche_poste_content, messages):
    """
    G√©n√®re un retour sur la pertinence du CV et sur la qualit√© des r√©ponses pendant l'entretien.

    Parameters
    ----------
    cv_content : str
        Le contenu du CV sous forme de texte.
    fiche_poste_content : str
        Le contenu de la fiche de poste sous forme de texte.
    messages : list of HumanMessage
        Historique des messages √©chang√©s pendant l'entretien.

    Returns
    -------
    tuple of str
        - Retour sur la pertinence du CV par rapport √† la fiche de poste.
        - Retour sur la qualit√© des r√©ponses de l'entretien (clart√©, pertinence, etc.).
    """
    cv_prompt = f"""Voici le contenu du CV :
{cv_content}

Voici la fiche de poste :
{fiche_poste_content}

√âvalue la pertinence du CV par rapport √† la fiche de poste, avec des points forts et des axes d'am√©lioration."""

    entretien_prompt = f"""Voici l'historique de l'entretien :
{chr(10).join([msg.content for msg in messages[1:]])}

Donne un retour constructif sur les r√©ponses du candidat : clart√©, pertinence, structure, et capacit√© d'argumentation."""

    cv_feedback = generer_reponse([HumanMessage(content=cv_prompt)])
    entretien_feedback = generer_reponse([HumanMessage(content=entretien_prompt)])

    return cv_feedback.content, entretien_feedback.content


# --- Interface Utilisateur ---

with st.sidebar:
    st.header("üìÅ Chargement des fichiers")
    cv_file = st.file_uploader("CV (pdf, docx, txt)", type=["pdf", "docx", "txt"])
    fiche_poste_file = st.file_uploader("Fiche de poste", type=["pdf", "docx", "txt"])

    st.header("üåê Param√®tres")
    langue = st.selectbox("Langue de l'entretien", ["Fran√ßais", "Anglais", "Espagnol", "Allemand"])

    if st.button("üü¢ D√©marrer l'entretien") and cv_file and fiche_poste_file:
        """
        D√©marre l'entretien en fonction des fichiers et param√®tres s√©lectionn√©s.

        R√©cup√®re le contenu des fichiers t√©l√©charg√©s et initialise les messages d'entretien. 
        En fonction de la langue choisie, pr√©pare un prompt pour interroger le mod√®le.
        """
        st.session_state['start'] = True
        st.session_state['cv_content'] = lire_fichier(cv_file)
        st.session_state['fiche_poste_content'] = lire_fichier(fiche_poste_file)
        st.session_state['messages'] = []

        # D√©finir le contexte en fonction de la langue choisie
        if langue == "Fran√ßais":
            context = f"""
            Tu es un recruteur RH en train de faire passer un entretien d'embauche.
            Voici le contenu du CV du candidat :
            {st.session_state['cv_content']}

            Voici la fiche de poste pour laquelle il postule :
            {st.session_state['fiche_poste_content']}

            Pose des questions pertinentes, une par une, comme dans un entretien r√©el. 
            Attends √† chaque fois la r√©ponse de l'utilisateur avant de continuer.
            """
            premiere_question = "Pouvez-vous vous pr√©senter ?"
        elif langue == "Anglais":
            context = f"""
            You are an HR recruiter doing a job interview.
            Here's the candidate's CV:
            {st.session_state['cv_content']}

            Here's the job description they're applying for:
            {st.session_state['fiche_poste_content']}

            Ask relevant questions, one at a time, like in a real interview.
            Wait for the user's response before continuing.
            """
            premiere_question = "Can you introduce yourself?"
        elif langue == "Espagnol":
            context = f"""
            Eres un reclutador de RRHH haciendo una entrevista de trabajo.
            Aqu√≠ est√° el CV del candidato:
            {st.session_state['cv_content']}

            Aqu√≠ la descripci√≥n del puesto al que est√° aplicando:
            {st.session_state['fiche_poste_content']}

            Haz preguntas relevantes, una a la vez, como en una entrevista real.
            Espera la respuesta del usuario antes de continuar.
            """
            premiere_question = "¬øPuede presentarse?"
        else:
            context = f"""
            Du bist ein HR-Recruiter im Vorstellungsgespr√§ch.
            Hier ist der Lebenslauf des Kandidaten:
            {st.session_state['cv_content']}

            Hier die Stellenbeschreibung, f√ºr die der Kandidat sich bewirbt:
            {st.session_state['fiche_poste_content']}

            Stelle relevante Fragen, eine nach der anderen, wie in einem echten Vorstellungsgespr√§ch.
            Warte auf die Antwort des Benutzers, bevor du fortf√§hrst.
            """
            premiere_question = "K√∂nnen Sie sich bitte vorstellen?"

        # Initialiser les messages
        st.session_state['messages'].append(HumanMessage(content=context))

        # Ajouter la premi√®re question du recruteur
        st.session_state['messages'].append(HumanMessage(content=premiere_question))
        st.session_state['chat_history'] = [("recruteur", premiere_question)]

# --- Partie principale : entretien ---

if st.session_state.get('start', False):

    st.subheader("üó®Ô∏è Entretien en cours")

    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    for sender, msg in st.session_state.chat_history:
        with st.chat_message(sender):
            st.markdown(msg)

    if user_input := st.chat_input("Votre r√©ponse ici..."):
        st.session_state['messages'].append(HumanMessage(content=user_input))
        st.session_state.chat_history.append(("user", user_input))

        response = generer_reponse(st.session_state['messages'])
        st.session_state['messages'].append(HumanMessage(content=response.content))
        st.session_state.chat_history.append(("assistant", response.content))

        with st.chat_message("assistant"):
            st.markdown(response.content)

    # Afficher feedback √† la fin
    if st.button("üõë Terminer l'entretien et obtenir le feedback"):
        with st.spinner("Analyse du CV et de l'entretien..."):
            cv_fb, entretien_fb = feedback(
                st.session_state['cv_content'],
                st.session_state['fiche_poste_content'],
                st.session_state['messages']
            )
        st.success("‚úÖ Feedback g√©n√©r√© avec succ√®s !")

        st.subheader("üìÑ Feedback sur le CV")
        st.markdown(cv_fb)

        st.subheader("üó£Ô∏è Feedback sur l'entretien")
        st.markdown(entretien_fb)
